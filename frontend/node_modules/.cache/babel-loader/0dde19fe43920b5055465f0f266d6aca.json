{"ast":null,"code":"var _jsxFileName = \"/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/CreatePostPage.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Box, Stack, FormControl, FormErrorMessage, Input, Textarea, RadioGroup, Radio, Select, Button, Alert, AlertIcon } from '@chakra-ui/react';\nimport { createLoadingAndErrorSelector, subredditsSelector } from '../selectors';\nimport { getSubreddits } from '../actions/subreddits';\nimport { submitPost } from '../actions/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CreatePostPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async e => {\n      try {\n        e.preventDefault();\n        const {\n          postType,\n          title,\n          body,\n          url,\n          subreddit\n        } = this.state;\n        const {\n          submitPost,\n          history\n        } = this.props;\n        const {\n          id\n        } = await submitPost({\n          type: postType,\n          title,\n          body: postType === 'text' ? body : url,\n          subreddit\n        });\n        history.push(`/r/${subreddit}/comments/${id}`);\n      } catch (err) {}\n    };\n\n    this.state = {\n      postType: 'text',\n      title: '',\n      body: '',\n      url: '',\n      subreddit: ''\n    };\n  }\n\n  componentDidMount() {\n    const {\n      getSubreddits\n    } = this.props;\n    getSubreddits();\n  }\n\n  render() {\n    const {\n      postType,\n      title,\n      body,\n      url,\n      subreddit\n    } = this.state;\n    const {\n      srIsLoading,\n      srError,\n      submitIsLoading,\n      submitError,\n      subreddits\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      w: ['100%', '90%', '80%', '70%'],\n      m: \"auto\",\n      children: [submitError && /*#__PURE__*/_jsxDEV(Alert, {\n        status: \"error\",\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), submitError]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n              value: postType,\n              onChange: postType => this.setState({\n                postType\n              }),\n              children: /*#__PURE__*/_jsxDEV(Stack, {\n                direction: \"row\",\n                spacing: 3,\n                children: [/*#__PURE__*/_jsxDEV(Radio, {\n                  value: \"text\",\n                  children: \"text post\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Radio, {\n                  value: \"link\",\n                  children: \"link\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              value: title,\n              onChange: e => this.setState({\n                title: e.target.value\n              }),\n              type: \"text\",\n              variant: \"filled\",\n              placeholder: \"title\",\n              isRequired: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: postType === 'text' ? /*#__PURE__*/_jsxDEV(Textarea, {\n              value: body,\n              onChange: e => this.setState({\n                body: e.target.value\n              }),\n              variant: \"filled\",\n              placeholder: \"text (optional)\",\n              rows: 10\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Input, {\n              value: url,\n              onChange: e => this.setState({\n                url: e.target.value\n              }),\n              type: \"url\",\n              variant: \"filled\",\n              placeholder: \"url\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            isInvalid: srError,\n            children: [/*#__PURE__*/_jsxDEV(Select, {\n              value: subreddit,\n              onChange: e => this.setState({\n                subreddit: e.target.value\n              }),\n              variant: \"filled\",\n              placeholder: srIsLoading ? 'loading...' : 'choose a subreddit',\n              isRequired: true,\n              children: subreddits.map(_ref => {\n                let {\n                  name\n                } = _ref;\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: name,\n                  children: name\n                }, name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 19\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n              children: \"Could not load subreddits\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            isLoading: srIsLoading || submitIsLoading || null,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst {\n  loadingSelector: srLoadingSelector,\n  errorSelector: srErrorSelector\n} = createLoadingAndErrorSelector(['GET_SUBREDDITS']);\nconst {\n  loadingSelector: submitLoadingSelector,\n  errorSelector: submitErrorSelector\n} = createLoadingAndErrorSelector(['SUBMIT_POST'], false);\n\nconst mapStateToProps = state => ({\n  srIsLoading: srLoadingSelector(state),\n  srError: srErrorSelector(state),\n  submitIsLoading: submitLoadingSelector(state),\n  submitError: submitErrorSelector(state),\n  subreddits: subredditsSelector(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getSubreddits: () => dispatch(getSubreddits()),\n  submitPost: postDetails => dispatch(submitPost(postDetails))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreatePostPage));","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/CreatePostPage.js"],"names":["React","connect","withRouter","Box","Stack","FormControl","FormErrorMessage","Input","Textarea","RadioGroup","Radio","Select","Button","Alert","AlertIcon","createLoadingAndErrorSelector","subredditsSelector","getSubreddits","submitPost","CreatePostPage","Component","constructor","props","handleSubmit","e","preventDefault","postType","title","body","url","subreddit","state","history","id","type","push","err","componentDidMount","render","srIsLoading","srError","submitIsLoading","submitError","subreddits","setState","target","value","map","name","loadingSelector","srLoadingSelector","errorSelector","srErrorSelector","submitLoadingSelector","submitErrorSelector","mapStateToProps","mapDispatchToProps","dispatch","postDetails"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Stack,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  Input,\r\n  Textarea,\r\n  RadioGroup,\r\n  Radio,\r\n  Select,\r\n  Button,\r\n  Alert,\r\n  AlertIcon,\r\n} from '@chakra-ui/react';\r\nimport {\r\n  createLoadingAndErrorSelector,\r\n  subredditsSelector,\r\n} from '../selectors';\r\nimport { getSubreddits } from '../actions/subreddits';\r\nimport { submitPost } from '../actions/post';\r\n\r\nclass CreatePostPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      postType: 'text',\r\n      title: '',\r\n      body: '',\r\n      url: '',\r\n      subreddit: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { getSubreddits } = this.props;\r\n    getSubreddits();\r\n  }\r\n\r\n  handleSubmit = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const { postType, title, body, url, subreddit } = this.state;\r\n      const { submitPost, history } = this.props;\r\n      const { id } = await submitPost({\r\n        type: postType,\r\n        title,\r\n        body: postType === 'text' ? body : url,\r\n        subreddit,\r\n      });\r\n      history.push(`/r/${subreddit}/comments/${id}`);\r\n    } catch (err) {}\r\n  };\r\n\r\n  render() {\r\n    const { postType, title, body, url, subreddit } = this.state;\r\n    const {\r\n      srIsLoading,\r\n      srError,\r\n      submitIsLoading,\r\n      submitError,\r\n      subreddits,\r\n    } = this.props;\r\n    return (\r\n      <Box w={['100%', '90%', '80%', '70%']} m=\"auto\">\r\n        {submitError && (\r\n          <Alert status=\"error\" mb={4}>\r\n            <AlertIcon />\r\n            {submitError}\r\n          </Alert>\r\n        )}\r\n        <form onSubmit={this.handleSubmit}>\r\n          <Stack spacing={3}>\r\n            <FormControl>\r\n              <RadioGroup\r\n                value={postType}\r\n                onChange={(postType) => this.setState({ postType })}\r\n              >\r\n                <Stack direction=\"row\" spacing={3}>\r\n                  <Radio value=\"text\">text post</Radio>\r\n                  <Radio value=\"link\">link</Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                value={title}\r\n                onChange={(e) => this.setState({ title: e.target.value })}\r\n                type=\"text\"\r\n                variant=\"filled\"\r\n                placeholder=\"title\"\r\n                isRequired\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              {postType === 'text' ? (\r\n                <Textarea\r\n                  value={body}\r\n                  onChange={(e) => this.setState({ body: e.target.value })}\r\n                  variant=\"filled\"\r\n                  placeholder=\"text (optional)\"\r\n                  rows={10}\r\n                />\r\n              ) : (\r\n                <Input\r\n                  value={url}\r\n                  onChange={(e) => this.setState({ url: e.target.value })}\r\n                  type=\"url\"\r\n                  variant=\"filled\"\r\n                  placeholder=\"url\"\r\n                  required\r\n                />\r\n              )}\r\n            </FormControl>\r\n            <FormControl isInvalid={srError}>\r\n              <Select\r\n                value={subreddit}\r\n                onChange={(e) => this.setState({ subreddit: e.target.value })}\r\n                variant=\"filled\"\r\n                placeholder={srIsLoading ? 'loading...' : 'choose a subreddit'}\r\n                isRequired\r\n              >\r\n                {subreddits.map(({ name }) => (\r\n                  <option key={name} value={name}>\r\n                    {name}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n              <FormErrorMessage>Could not load subreddits</FormErrorMessage>\r\n            </FormControl>\r\n            <Button\r\n              type=\"submit\"\r\n              isLoading={srIsLoading || submitIsLoading || null}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Stack>\r\n        </form>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nconst {\r\n  loadingSelector: srLoadingSelector,\r\n  errorSelector: srErrorSelector,\r\n} = createLoadingAndErrorSelector(['GET_SUBREDDITS']);\r\n\r\nconst {\r\n  loadingSelector: submitLoadingSelector,\r\n  errorSelector: submitErrorSelector,\r\n} = createLoadingAndErrorSelector(['SUBMIT_POST'], false);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  srIsLoading: srLoadingSelector(state),\r\n  srError: srErrorSelector(state),\r\n  submitIsLoading: submitLoadingSelector(state),\r\n  submitError: submitErrorSelector(state),\r\n  subreddits: subredditsSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getSubreddits: () => dispatch(getSubreddits()),\r\n  submitPost: (postDetails) => dispatch(submitPost(postDetails)),\r\n});\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(CreatePostPage)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}