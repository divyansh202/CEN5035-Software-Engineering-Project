{"ast":null,"code":"var _jsxFileName = \"/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/WriteCommentBox.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Box, HStack, FormControl, FormErrorMessage, Textarea, Button } from '@chakra-ui/react';\nimport { userSelector, createLoadingAndErrorSelector } from '../selectors';\nimport { submitComment } from '../actions/comments';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass WriteCommentBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const {\n        body\n      } = this.state;\n      const {\n        postId,\n        parentCommentId,\n        submitComment,\n        onClose\n      } = this.props;\n      await submitComment({\n        body,\n        post_id: postId,\n        parent_comment_id: parentCommentId\n      });\n      const {\n        error\n      } = this.props;\n      this.setState({\n        body: ''\n      });\n\n      if (error) {\n        this.setState({\n          hasError: true\n        });\n      }\n\n      if (!error && onClose) {\n        onClose();\n      }\n    };\n\n    this.state = {\n      body: '',\n      hasError: false\n    };\n  }\n\n  render() {\n    const {\n      body,\n      hasError\n    } = this.state;\n    const {\n      type = 'comment',\n      isLoading,\n      error,\n      user,\n      onClose\n    } = this.props;\n    const isReply = type === 'reply';\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          mb: 3,\n          isInvalid: error && hasError,\n          children: [/*#__PURE__*/_jsxDEV(Textarea, {\n            value: body,\n            onChange: e => this.setState({\n              body: e.target.value\n            }),\n            variant: \"filled\",\n            isDisabled: !user,\n            placeholder: \"what are your thoughts?\",\n            rows: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            isDisabled: !body,\n            isLoading: isLoading,\n            type: \"submit\",\n            children: type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), isReply && onClose && /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onClose,\n            children: \"cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst {\n  loadingSelector,\n  errorSelector\n} = createLoadingAndErrorSelector(['SUBMIT_COMMENT'], false);\n\nconst mapStateToProps = state => ({\n  isLoading: loadingSelector(state),\n  error: errorSelector(state),\n  user: userSelector(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  submitComment: commentDetails => dispatch(submitComment(commentDetails))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WriteCommentBox);","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/WriteCommentBox.js"],"names":["React","connect","Box","HStack","FormControl","FormErrorMessage","Textarea","Button","userSelector","createLoadingAndErrorSelector","submitComment","WriteCommentBox","Component","constructor","props","handleSubmit","e","preventDefault","body","state","postId","parentCommentId","onClose","post_id","parent_comment_id","error","setState","hasError","render","type","isLoading","user","isReply","target","value","loadingSelector","errorSelector","mapStateToProps","mapDispatchToProps","dispatch","commentDetails"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Box,\r\n  HStack,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  Textarea,\r\n  Button,\r\n} from '@chakra-ui/react';\r\nimport { userSelector, createLoadingAndErrorSelector } from '../selectors';\r\nimport { submitComment } from '../actions/comments';\r\n\r\nclass WriteCommentBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      body: '',\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { body } = this.state;\r\n    const { postId, parentCommentId, submitComment, onClose } = this.props;\r\n    await submitComment({\r\n      body,\r\n      post_id: postId,\r\n      parent_comment_id: parentCommentId,\r\n    });\r\n    const { error } = this.props;\r\n    this.setState({ body: '' });\r\n    if (error) {\r\n      this.setState({ hasError: true });\r\n    }\r\n    if (!error && onClose) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { body, hasError } = this.state;\r\n    const { type = 'comment', isLoading, error, user, onClose } = this.props;\r\n    const isReply = type === 'reply';\r\n    return (\r\n      <Box>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <FormControl mb={3} isInvalid={error && hasError}>\r\n            <Textarea\r\n              value={body}\r\n              onChange={(e) =>\r\n                this.setState({\r\n                  body: e.target.value,\r\n                })\r\n              }\r\n              variant=\"filled\"\r\n              isDisabled={!user}\r\n              placeholder=\"what are your thoughts?\"\r\n              rows={5}\r\n            />\r\n            <FormErrorMessage>{error}</FormErrorMessage>\r\n          </FormControl>\r\n          <HStack>\r\n            <Button isDisabled={!body} isLoading={isLoading} type=\"submit\">\r\n              {type}\r\n            </Button>\r\n            {isReply && onClose && <Button onClick={onClose}>cancel</Button>}\r\n          </HStack>\r\n        </form>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nconst { loadingSelector, errorSelector } = createLoadingAndErrorSelector(\r\n  ['SUBMIT_COMMENT'],\r\n  false\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoading: loadingSelector(state),\r\n  error: errorSelector(state),\r\n  user: userSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  submitComment: (commentDetails) => dispatch(submitComment(commentDetails)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WriteCommentBox);\r\n"]},"metadata":{},"sourceType":"module"}