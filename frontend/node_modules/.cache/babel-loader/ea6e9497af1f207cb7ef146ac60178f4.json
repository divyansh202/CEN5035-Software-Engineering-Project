{"ast":null,"code":"var _jsxFileName = \"/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/PostList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { Box, Flex, Alert, AlertIcon, Heading, Text, CircularProgress } from '@chakra-ui/react';\nimport Post from './Post';\nimport { createLoadingAndErrorSelector, postListSelector } from '../selectors';\nimport { getPostList } from '../actions/postList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = _ref => {\n  _s();\n\n  let {\n    isLoading,\n    error,\n    postList,\n    getPostList\n  } = _ref;\n  const {\n    subreddit\n  } = useParams();\n  useEffect(() => {\n    getPostList({\n      subreddit\n    });\n  }, [getPostList, subreddit]);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      m: 10,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        isIndeterminate: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  } else if (error) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      status: \"error\",\n      children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      children: subreddit ? `r/${subreddit}` : 'Home'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), postList.length > 0 ? postList.map(_ref2 => {\n      let {\n        id,\n        type,\n        title,\n        body,\n        created_at,\n        votes,\n        has_voted,\n        number_of_comments,\n        author_name,\n        subreddit_name\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(Box, {\n        my: 4,\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          id: id,\n          type: type,\n          subreddit: subreddit_name,\n          author: author_name,\n          createdAt: created_at,\n          title: title,\n          body: body,\n          numComments: number_of_comments,\n          numVotes: votes,\n          hasVoted: has_voted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)\n      }, `${id}-${title}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(Text, {\n      m: 5,\n      children: \"There are no posts to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostList, \"DuItPZvC/6QqxR8TMloQJpLhRSc=\", false, function () {\n  return [useParams];\n});\n\n_c = PostList;\nconst {\n  loadingSelector,\n  errorSelector\n} = createLoadingAndErrorSelector(['GET_POST_LIST']);\n\nconst mapStateToProps = state => ({\n  isLoading: loadingSelector(state),\n  error: errorSelector(state),\n  postList: postListSelector(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getPostList: filters => dispatch(getPostList(filters))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/PostList.js"],"names":["React","useEffect","connect","useParams","Box","Flex","Alert","AlertIcon","Heading","Text","CircularProgress","Post","createLoadingAndErrorSelector","postListSelector","getPostList","PostList","isLoading","error","postList","subreddit","length","map","id","type","title","body","created_at","votes","has_voted","number_of_comments","author_name","subreddit_name","loadingSelector","errorSelector","mapStateToProps","state","mapDispatchToProps","dispatch","filters"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Alert,\r\n  AlertIcon,\r\n  Heading,\r\n  Text,\r\n  CircularProgress,\r\n} from '@chakra-ui/react';\r\nimport Post from './Post';\r\nimport { createLoadingAndErrorSelector, postListSelector } from '../selectors';\r\nimport { getPostList } from '../actions/postList';\r\n\r\nconst PostList = ({ isLoading, error, postList, getPostList }) => {\r\n  const { subreddit } = useParams();\r\n\r\n  useEffect(() => {\r\n    getPostList({ subreddit });\r\n  }, [getPostList, subreddit]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Flex m={10} justifyContent=\"center\" alignItems=\"center\">\r\n        <CircularProgress isIndeterminate />\r\n      </Flex>\r\n    );\r\n  } else if (error) {\r\n    return (\r\n      <Alert status=\"error\">\r\n        <AlertIcon />\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n  return (\r\n    <Box>\r\n      <Heading>{subreddit ? `r/${subreddit}` : 'Home'}</Heading>\r\n      {postList.length > 0 ? (\r\n        postList.map(\r\n          ({\r\n            id,\r\n            type,\r\n            title,\r\n            body,\r\n            created_at,\r\n            votes,\r\n            has_voted,\r\n            number_of_comments,\r\n            author_name,\r\n            subreddit_name,\r\n          }) => (\r\n            <Box key={`${id}-${title}`} my={4}>\r\n              <Post\r\n                id={id}\r\n                type={type}\r\n                subreddit={subreddit_name}\r\n                author={author_name}\r\n                createdAt={created_at}\r\n                title={title}\r\n                body={body}\r\n                numComments={number_of_comments}\r\n                numVotes={votes}\r\n                hasVoted={has_voted}\r\n              />\r\n            </Box>\r\n          )\r\n        )\r\n      ) : (\r\n        <Text m={5}>There are no posts to display.</Text>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst { loadingSelector, errorSelector } = createLoadingAndErrorSelector([\r\n  'GET_POST_LIST',\r\n]);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoading: loadingSelector(state),\r\n  error: errorSelector(state),\r\n  postList: postListSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getPostList: (filters) => dispatch(getPostList(filters)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\r\n"]},"metadata":{},"sourceType":"module"}