{"ast":null,"code":"export const createLoadingSelector = function (requestNames) {\n  let defaultLoading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return state => {\n    const entries = Object.entries(state.loading).filter(_ref => {\n      let [key] = _ref;\n      return requestNames.includes(key);\n    });\n    const loading = entries.some(_ref2 => {\n      let [, value] = _ref2;\n      return value;\n    });\n    return defaultLoading ? entries.length === 0 || loading : loading;\n  };\n};\nexport const createErrorSelector = requestNames => state => {\n  const entries = Object.entries(state.error).filter(_ref3 => {\n    let [key] = _ref3;\n    return requestNames.includes(key);\n  });\n\n  if (entries[0]) {\n    const {\n      message,\n      response\n    } = entries[0][1];\n    return response && response.data && response.data.error || message;\n  } else {\n    return false;\n  }\n};\nexport const createLoadingAndErrorSelector = function (requestNames) {\n  let defaultLoading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const loadingSelector = createLoadingSelector(requestNames, defaultLoading);\n  const errorSelector = createErrorSelector(requestNames);\n  return {\n    loadingSelector,\n    errorSelector\n  };\n};\nexport const postSelector = state => state.post;\nexport const postListSelector = state => state.postList;\nexport const commentsSelector = state => state.comments;\nexport const userSelector = state => state.auth.user;\nexport const tokenSelector = state => state.auth.token;\nexport const subredditsSelector = state => state.subreddits;","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/selectors/index.js"],"names":["createLoadingSelector","requestNames","defaultLoading","state","entries","Object","loading","filter","key","includes","some","value","length","createErrorSelector","error","message","response","data","createLoadingAndErrorSelector","loadingSelector","errorSelector","postSelector","post","postListSelector","postList","commentsSelector","comments","userSelector","auth","user","tokenSelector","token","subredditsSelector","subreddits"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAG,UAACC,YAAD;AAAA,MAAeC,cAAf,uEAAgC,IAAhC;AAAA,SACnCC,KAD4E,IAEzE;AACH,UAAMC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeD,KAAK,CAACG,OAArB,EAA8BC,MAA9B,CAAqC;AAAA,UAAC,CAACC,GAAD,CAAD;AAAA,aACnDP,YAAY,CAACQ,QAAb,CAAsBD,GAAtB,CADmD;AAAA,KAArC,CAAhB;AAGA,UAAMF,OAAO,GAAGF,OAAO,CAACM,IAAR,CAAa;AAAA,UAAC,GAAGC,KAAH,CAAD;AAAA,aAAeA,KAAf;AAAA,KAAb,CAAhB;AACA,WAAOT,cAAc,GAAGE,OAAO,CAACQ,MAAR,KAAmB,CAAnB,IAAwBN,OAA3B,GAAqCA,OAA1D;AACD,GARoC;AAAA,CAA9B;AAUP,OAAO,MAAMO,mBAAmB,GAAIZ,YAAD,IAAmBE,KAAD,IAAW;AAC9D,QAAMC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeD,KAAK,CAACW,KAArB,EAA4BP,MAA5B,CAAmC;AAAA,QAAC,CAACC,GAAD,CAAD;AAAA,WACjDP,YAAY,CAACQ,QAAb,CAAsBD,GAAtB,CADiD;AAAA,GAAnC,CAAhB;;AAGA,MAAIJ,OAAO,CAAC,CAAD,CAAX,EAAgB;AACd,UAAM;AAAEW,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAwBZ,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAA9B;AACA,WAAQY,QAAQ,IAAIA,QAAQ,CAACC,IAArB,IAA6BD,QAAQ,CAACC,IAAT,CAAcH,KAA5C,IAAsDC,OAA7D;AACD,GAHD,MAGO;AACL,WAAO,KAAP;AACD;AACF,CAVM;AAYP,OAAO,MAAMG,6BAA6B,GAAG,UAC3CjB,YAD2C,EAGxC;AAAA,MADHC,cACG,uEADc,IACd;AACH,QAAMiB,eAAe,GAAGnB,qBAAqB,CAACC,YAAD,EAAeC,cAAf,CAA7C;AACA,QAAMkB,aAAa,GAAGP,mBAAmB,CAACZ,YAAD,CAAzC;AACA,SAAO;AAAEkB,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,GAAP;AACD,CAPM;AASP,OAAO,MAAMC,YAAY,GAAIlB,KAAD,IAAWA,KAAK,CAACmB,IAAtC;AAEP,OAAO,MAAMC,gBAAgB,GAAIpB,KAAD,IAAWA,KAAK,CAACqB,QAA1C;AAEP,OAAO,MAAMC,gBAAgB,GAAItB,KAAD,IAAWA,KAAK,CAACuB,QAA1C;AAEP,OAAO,MAAMC,YAAY,GAAIxB,KAAD,IAAWA,KAAK,CAACyB,IAAN,CAAWC,IAA3C;AAEP,OAAO,MAAMC,aAAa,GAAI3B,KAAD,IAAWA,KAAK,CAACyB,IAAN,CAAWG,KAA5C;AAEP,OAAO,MAAMC,kBAAkB,GAAI7B,KAAD,IAAWA,KAAK,CAAC8B,UAA5C","sourcesContent":["export const createLoadingSelector = (requestNames, defaultLoading = true) => (\r\n  state\r\n) => {\r\n  const entries = Object.entries(state.loading).filter(([key]) =>\r\n    requestNames.includes(key)\r\n  );\r\n  const loading = entries.some(([, value]) => value);\r\n  return defaultLoading ? entries.length === 0 || loading : loading;\r\n};\r\n\r\nexport const createErrorSelector = (requestNames) => (state) => {\r\n  const entries = Object.entries(state.error).filter(([key]) =>\r\n    requestNames.includes(key)\r\n  );\r\n  if (entries[0]) {\r\n    const { message, response } = entries[0][1];\r\n    return (response && response.data && response.data.error) || message;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const createLoadingAndErrorSelector = (\r\n  requestNames,\r\n  defaultLoading = true\r\n) => {\r\n  const loadingSelector = createLoadingSelector(requestNames, defaultLoading);\r\n  const errorSelector = createErrorSelector(requestNames);\r\n  return { loadingSelector, errorSelector };\r\n};\r\n\r\nexport const postSelector = (state) => state.post;\r\n\r\nexport const postListSelector = (state) => state.postList;\r\n\r\nexport const commentsSelector = (state) => state.comments;\r\n\r\nexport const userSelector = (state) => state.auth.user;\r\n\r\nexport const tokenSelector = (state) => state.auth.token;\r\n\r\nexport const subredditsSelector = (state) => state.subreddits;\r\n"]},"metadata":{},"sourceType":"module"}