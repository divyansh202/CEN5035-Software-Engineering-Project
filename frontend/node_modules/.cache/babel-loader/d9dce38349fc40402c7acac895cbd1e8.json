{"ast":null,"code":"import axios from '../axios-config';\nimport { setPost, editPost, deletePost } from './post';\nimport { setComments, updateComment, deleteComment } from './comments';\nimport { postListSelector, commentsSelector, postSelector } from '../selectors';\nexport const getPostAndComments = id => async dispatch => {\n  try {\n    dispatch({\n      type: 'GET_POST_AND_COMMENTS_REQUEST'\n    });\n    const response = await axios.get(`/comments/${id}`);\n    dispatch(setPost(response.data.post));\n    dispatch(setComments(response.data.comments));\n    dispatch({\n      type: 'GET_POST_AND_COMMENTS_SUCCESS'\n    });\n  } catch (e) {\n    dispatch({\n      type: 'GET_POST_AND_COMMENTS_FAILURE',\n      message: e.message\n    });\n  }\n};\nexport const startEditPost = _ref => {\n  let {\n    id,\n    body\n  } = _ref;\n  return async dispatch => {\n    try {\n      dispatch({\n        type: 'EDIT_POST_REQUEST'\n      });\n      await axios.put(`/posts/${id}`, {\n        body\n      });\n      dispatch(editPost(id, {\n        body\n      }));\n      dispatch({\n        type: 'EDIT_POST_SUCCESS'\n      });\n    } catch (e) {\n      dispatch({\n        type: 'EDIT_POST_FAILURE',\n        message: e.message,\n        response: e.response\n      });\n    }\n  };\n};\nexport const startDeletePost = id => async dispatch => {\n  try {\n    dispatch({\n      type: 'DELETE_POST_REQUEST'\n    });\n    await axios.delete(`/posts/${id}`);\n    dispatch(deletePost(id));\n    dispatch({\n      type: 'DELETE_POST_SUCCESS'\n    });\n  } catch (e) {\n    dispatch({\n      type: 'DELETE_POST_FAILURE',\n      message: e.message,\n      response: e.response\n    });\n  }\n};\nexport const startEditComment = _ref2 => {\n  let {\n    id,\n    body\n  } = _ref2;\n  return async dispatch => {\n    try {\n      dispatch({\n        type: 'EDIT_COMMENT_REQUEST'\n      });\n      await axios.put(`/comments/${id}`, {\n        body\n      });\n      dispatch(updateComment(id, {\n        body\n      }));\n      dispatch({\n        type: 'EDIT_COMMENT_SUCCESS'\n      });\n    } catch (e) {\n      dispatch({\n        type: 'EDIT_COMMENT_FAILURE',\n        message: e.message,\n        response: e.response\n      });\n    }\n  };\n};\nexport const startDeleteComment = id => async dispatch => {\n  try {\n    dispatch({\n      type: 'DELETE_COMMENT_REQUEST'\n    });\n    await axios.delete(`/comments/${id}`);\n    dispatch(deleteComment(id));\n    dispatch({\n      type: 'DELETE_COMMENT_SUCCESS'\n    });\n  } catch (e) {\n    dispatch({\n      type: 'DELETE_COMMENT_FAILURE',\n      message: e.message,\n      response: e.response\n    });\n  }\n};\nexport const submitVote = _ref3 => {\n  let {\n    type,\n    id,\n    voteValue,\n    newNumVotes\n  } = _ref3;\n  return async (dispatch, getState) => {\n    if (!['post', 'comment'].includes(type)) {\n      throw new Error('You can only submit votes for posts and comments');\n    }\n\n    if (type === 'post') {\n      const changePostVotes = _ref4 => {\n        let {\n          has_voted,\n          votes\n        } = _ref4;\n        const newPostDetails = {\n          has_voted,\n          votes\n        };\n        const {\n          has_voted: originalVoteValue,\n          votes: originalNumVotes\n        } = postListSelector(getState()).find(post => post.id === id) || postSelector(getState());\n        dispatch(editPost(id, newPostDetails));\n        return {\n          originalVoteValue,\n          originalNumVotes\n        };\n      };\n\n      const {\n        originalVoteValue,\n        originalNumVotes\n      } = changePostVotes({\n        has_voted: voteValue,\n        votes: newNumVotes\n      });\n\n      try {\n        await axios.post(`/votes/post`, {\n          item_id: id,\n          vote_value: voteValue\n        });\n      } catch (e) {\n        changePostVotes({\n          has_voted: originalVoteValue,\n          votes: originalNumVotes\n        });\n      }\n    } else {\n      const changeCommentVote = _ref5 => {\n        let {\n          has_voted,\n          votes\n        } = _ref5;\n        const {\n          has_voted: originalVoteValue,\n          votes: originalNumVotes\n        } = commentsSelector(getState()).find(comment => comment.id === id) || {};\n        dispatch(updateComment(id, {\n          has_voted,\n          votes\n        }));\n        return {\n          originalVoteValue,\n          originalNumVotes\n        };\n      };\n\n      const {\n        originalVoteValue,\n        originalNumVotes\n      } = changeCommentVote({\n        has_voted: voteValue,\n        votes: newNumVotes\n      });\n\n      try {\n        await axios.post(`/votes/comment`, {\n          item_id: id,\n          vote_value: voteValue\n        });\n      } catch (e) {\n        changeCommentVote({\n          has_voted: originalVoteValue,\n          votes: originalNumVotes\n        });\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/actions/index.js"],"names":["axios","setPost","editPost","deletePost","setComments","updateComment","deleteComment","postListSelector","commentsSelector","postSelector","getPostAndComments","id","dispatch","type","response","get","data","post","comments","e","message","startEditPost","body","put","startDeletePost","delete","startEditComment","startDeleteComment","submitVote","voteValue","newNumVotes","getState","includes","Error","changePostVotes","has_voted","votes","newPostDetails","originalVoteValue","originalNumVotes","find","item_id","vote_value","changeCommentVote","comment"],"mappings":"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","sourcesContent":["import axios from '../axios-config';\r\nimport { setPost, editPost, deletePost } from './post';\r\nimport { setComments, updateComment, deleteComment } from './comments';\r\nimport { postListSelector, commentsSelector, postSelector } from '../selectors';\r\n\r\nexport const getPostAndComments = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: 'GET_POST_AND_COMMENTS_REQUEST' });\r\n    const response = await axios.get(`/comments/${id}`);\r\n    dispatch(setPost(response.data.post));\r\n    dispatch(setComments(response.data.comments));\r\n    dispatch({ type: 'GET_POST_AND_COMMENTS_SUCCESS' });\r\n  } catch (e) {\r\n    dispatch({ type: 'GET_POST_AND_COMMENTS_FAILURE', message: e.message });\r\n  }\r\n};\r\n\r\nexport const startEditPost = ({ id, body }) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: 'EDIT_POST_REQUEST' });\r\n    await axios.put(`/posts/${id}`, { body });\r\n    dispatch(editPost(id, { body }));\r\n\r\n    dispatch({ type: 'EDIT_POST_SUCCESS' });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: 'EDIT_POST_FAILURE',\r\n      message: e.message,\r\n      response: e.response,\r\n    });\r\n  }\r\n};\r\n\r\nexport const startDeletePost = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: 'DELETE_POST_REQUEST' });\r\n    await axios.delete(`/posts/${id}`);\r\n    dispatch(deletePost(id));\r\n    dispatch({ type: 'DELETE_POST_SUCCESS' });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: 'DELETE_POST_FAILURE',\r\n      message: e.message,\r\n      response: e.response,\r\n    });\r\n  }\r\n};\r\n\r\nexport const startEditComment = ({ id, body }) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: 'EDIT_COMMENT_REQUEST' });\r\n    await axios.put(`/comments/${id}`, { body });\r\n    dispatch(updateComment(id, { body }));\r\n    dispatch({ type: 'EDIT_COMMENT_SUCCESS' });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: 'EDIT_COMMENT_FAILURE',\r\n      message: e.message,\r\n      response: e.response,\r\n    });\r\n  }\r\n};\r\n\r\nexport const startDeleteComment = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: 'DELETE_COMMENT_REQUEST' });\r\n    await axios.delete(`/comments/${id}`);\r\n    dispatch(deleteComment(id));\r\n    dispatch({ type: 'DELETE_COMMENT_SUCCESS' });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: 'DELETE_COMMENT_FAILURE',\r\n      message: e.message,\r\n      response: e.response,\r\n    });\r\n  }\r\n};\r\n\r\nexport const submitVote = ({ type, id, voteValue, newNumVotes }) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  if (!['post', 'comment'].includes(type)) {\r\n    throw new Error('You can only submit votes for posts and comments');\r\n  }\r\n\r\n  if (type === 'post') {\r\n    const changePostVotes = ({ has_voted, votes }) => {\r\n      const newPostDetails = { has_voted, votes };\r\n      const { has_voted: originalVoteValue, votes: originalNumVotes } =\r\n        postListSelector(getState()).find((post) => post.id === id) ||\r\n        postSelector(getState());\r\n      dispatch(editPost(id, newPostDetails));\r\n      return { originalVoteValue, originalNumVotes };\r\n    };\r\n\r\n    const { originalVoteValue, originalNumVotes } = changePostVotes({\r\n      has_voted: voteValue,\r\n      votes: newNumVotes,\r\n    });\r\n\r\n    try {\r\n      await axios.post(`/votes/post`, {\r\n        item_id: id,\r\n        vote_value: voteValue,\r\n      });\r\n    } catch (e) {\r\n      changePostVotes({\r\n        has_voted: originalVoteValue,\r\n        votes: originalNumVotes,\r\n      });\r\n    }\r\n  } else {\r\n    const changeCommentVote = ({ has_voted, votes }) => {\r\n      const { has_voted: originalVoteValue, votes: originalNumVotes } =\r\n        commentsSelector(getState()).find((comment) => comment.id === id) || {};\r\n      dispatch(updateComment(id, { has_voted, votes }));\r\n      return { originalVoteValue, originalNumVotes };\r\n    };\r\n\r\n    const { originalVoteValue, originalNumVotes } = changeCommentVote({\r\n      has_voted: voteValue,\r\n      votes: newNumVotes,\r\n    });\r\n\r\n    try {\r\n      await axios.post(`/votes/comment`, {\r\n        item_id: id,\r\n        vote_value: voteValue,\r\n      });\r\n    } catch (e) {\r\n      changeCommentVote({\r\n        has_voted: originalVoteValue,\r\n        votes: originalNumVotes,\r\n      });\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}