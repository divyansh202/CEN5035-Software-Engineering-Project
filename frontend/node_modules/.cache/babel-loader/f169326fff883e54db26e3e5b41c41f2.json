{"ast":null,"code":"var _jsxFileName = \"/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/EditBox.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Box, HStack, FormControl, FormErrorMessage, Textarea, Button } from '@chakra-ui/react';\nimport { startEditComment, startEditPost } from '../actions';\nimport { createErrorSelector } from '../selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditBox = _ref => {\n  _s();\n\n  let {\n    type = 'post',\n    id,\n    initialText,\n    onClose,\n    error,\n    startEditPost,\n    startEditComment\n  } = _ref;\n  const [value, setValue] = useState(initialText);\n  const [isLoading, setIsLoading] = useState(false);\n  const hasError = useRef(error);\n  useEffect(() => {\n    let isMounted = true;\n\n    if (isMounted) {\n      hasError.current = error;\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  });\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    if (type === 'post') {\n      await startEditPost({\n        id,\n        body: value\n      });\n    } else {\n      await startEditComment({\n        id,\n        body: value\n      });\n    }\n\n    if (!hasError.current) {\n      onClose();\n    } else {\n      setIsLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        mb: 3,\n        isInvalid: !!error,\n        children: [/*#__PURE__*/_jsxDEV(Textarea, {\n          value: value,\n          onChange: e => setValue(e.target.value),\n          rows: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HStack, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          isDisabled: value === initialText,\n          isLoading: isLoading,\n          type: \"submit\",\n          children: \"save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onClose,\n          children: \"cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditBox, \"saLNiCfPHmrgVZ+xCMC83oWHLbI=\");\n\n_c = EditBox;\nconst errorSelector = createErrorSelector(['EDIT_POST', 'EDIT_COMMENT']);\n\nconst mapStateToProps = state => ({\n  error: errorSelector(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startEditPost: _ref2 => {\n    let {\n      id,\n      body\n    } = _ref2;\n    return dispatch(startEditPost({\n      id,\n      body\n    }));\n  },\n  startEditComment: _ref3 => {\n    let {\n      id,\n      body\n    } = _ref3;\n    return dispatch(startEditComment({\n      id,\n      body\n    }));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditBox);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditBox\");","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/EditBox.js"],"names":["useState","useEffect","useRef","connect","Box","HStack","FormControl","FormErrorMessage","Textarea","Button","startEditComment","startEditPost","createErrorSelector","EditBox","type","id","initialText","onClose","error","value","setValue","isLoading","setIsLoading","hasError","isMounted","current","handleSubmit","e","preventDefault","body","target","errorSelector","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Box,\r\n  HStack,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  Textarea,\r\n  Button,\r\n} from '@chakra-ui/react';\r\nimport { startEditComment, startEditPost } from '../actions';\r\nimport { createErrorSelector } from '../selectors';\r\n\r\nconst EditBox = ({\r\n  type = 'post',\r\n  id,\r\n  initialText,\r\n  onClose,\r\n  error,\r\n  startEditPost,\r\n  startEditComment,\r\n}) => {\r\n  const [value, setValue] = useState(initialText);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const hasError = useRef(error);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      hasError.current = error;\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    if (type === 'post') {\r\n      await startEditPost({ id, body: value });\r\n    } else {\r\n      await startEditComment({ id, body: value });\r\n    }\r\n    if (!hasError.current) {\r\n      onClose();\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <form onSubmit={handleSubmit}>\r\n        <FormControl mb={3} isInvalid={!!error}>\r\n          <Textarea\r\n            value={value}\r\n            onChange={(e) => setValue(e.target.value)}\r\n            rows={5}\r\n          />\r\n          <FormErrorMessage>{error}</FormErrorMessage>\r\n        </FormControl>\r\n        <HStack>\r\n          <Button\r\n            isDisabled={value === initialText}\r\n            isLoading={isLoading}\r\n            type=\"submit\"\r\n          >\r\n            save\r\n          </Button>\r\n          <Button onClick={onClose}>cancel</Button>\r\n        </HStack>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst errorSelector = createErrorSelector(['EDIT_POST', 'EDIT_COMMENT']);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  error: errorSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  startEditPost: ({ id, body }) => dispatch(startEditPost({ id, body })),\r\n  startEditComment: ({ id, body }) => dispatch(startEditComment({ id, body })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditBox);\r\n"]},"metadata":{},"sourceType":"module"}