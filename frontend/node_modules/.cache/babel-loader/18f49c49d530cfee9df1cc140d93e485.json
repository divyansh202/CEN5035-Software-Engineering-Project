{"ast":null,"code":"var _jsxFileName = \"/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/Comment.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport moment from 'moment';\nimport { Box, Flex, HStack, IconButton, Text, Tooltip, useColorMode } from '@chakra-ui/react';\nimport { ChatIcon, EditIcon } from '@chakra-ui/icons';\nimport ThemedBox from './ThemedBox';\nimport UpvoteBar from './UpvoteBar';\nimport WriteCommentBox from './WriteCommentBox';\nimport EditBox from './EditBox';\nimport DeleteButton from './DeleteButton';\nimport ChakraMarkdown from './ChakraMarkdown';\nimport { userSelector } from '../selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comment = _ref => {\n  _s();\n\n  let {\n    id,\n    body,\n    postId,\n    createdAt,\n    author,\n    numVotes,\n    hasVoted,\n    user\n  } = _ref;\n  const {\n    colorMode\n  } = useColorMode();\n  const commentDetailColor = 'gray.500';\n  const commentDetailBgColor = colorMode === 'light' ? 'gray.100' : 'gray.600';\n  const [showWriteReply, setShowWriteReply] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const history = useHistory();\n  const location = useLocation();\n  const deletedText = '[deleted]';\n  return /*#__PURE__*/_jsxDEV(ThemedBox, {\n    p: 4,\n    borderRadius: \"md\",\n    width: \"100%\",\n    light: \"gray.50\",\n    dark: \"gray.700\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(UpvoteBar, {\n        type: \"comment\",\n        size: 5,\n        id: id,\n        numVotes: numVotes,\n        voteValue: hasVoted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        flexGrow: 1,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          as: \"span\",\n          isTruncated: true,\n          children: author === null ? deletedText : author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), ' ', /*#__PURE__*/_jsxDEV(Text, {\n          as: \"span\",\n          color: \"gray.500\",\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            label: moment(createdAt).format('LLLL'),\n            children: moment(createdAt).fromNow()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), isEditing ? /*#__PURE__*/_jsxDEV(Box, {\n          mt: 7,\n          children: /*#__PURE__*/_jsxDEV(EditBox, {\n            type: \"comment\",\n            id: id,\n            onClose: () => setIsEditing(false),\n            initialText: body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Text, {\n          children: body === null ? deletedText : /*#__PURE__*/_jsxDEV(Box, {\n            listStylePosition: \"inside\",\n            children: /*#__PURE__*/_jsxDEV(ChakraMarkdown, {\n              children: body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          mt: 3,\n          alignItems: \"center\",\n          color: commentDetailColor,\n          fontWeight: \"bold\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            p: 2,\n            borderRadius: \"sm\",\n            _hover: {\n              backgroundColor: commentDetailBgColor,\n              cursor: 'pointer'\n            },\n            onClick: () => {\n              if (user) {\n                setShowWriteReply(!showWriteReply);\n              } else {\n                history.push({\n                  pathname: '/login',\n                  state: {\n                    requireAuth: 'Log in to reply to comments',\n                    prevPathname: location.pathname\n                  }\n                });\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(ChatIcon, {\n              mr: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this), \"Reply\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), user && user.username && user.username === author && /*#__PURE__*/_jsxDEV(HStack, {\n        alignItems: \"flex-start\",\n        children: [!isEditing && /*#__PURE__*/_jsxDEV(IconButton, {\n          backgroundColor: \"inherit\",\n          onClick: () => setIsEditing(true),\n          icon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n          type: \"comment\",\n          id: id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), showWriteReply && /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        m: 2,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          as: \"span\",\n          color: \"gray.500\",\n          children: 'Reply to '\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), author, /*#__PURE__*/_jsxDEV(Text, {\n          as: \"span\",\n          color: \"gray.500\",\n          children: ' as '\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), user.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(WriteCommentBox, {\n        type: \"reply\",\n        postId: postId,\n        parentCommentId: id,\n        onClose: () => setShowWriteReply(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comment, \"ArlyxnWYU/xy8k+yqSAXP+meQ5E=\", false, function () {\n  return [useColorMode, useHistory, useLocation];\n});\n\n_c = Comment;\n\nconst mapStateToProps = state => ({\n  user: userSelector(state)\n});\n\nexport default connect(mapStateToProps)(Comment);\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/Comment.js"],"names":["useState","connect","useHistory","useLocation","moment","Box","Flex","HStack","IconButton","Text","Tooltip","useColorMode","ChatIcon","EditIcon","ThemedBox","UpvoteBar","WriteCommentBox","EditBox","DeleteButton","ChakraMarkdown","userSelector","Comment","id","body","postId","createdAt","author","numVotes","hasVoted","user","colorMode","commentDetailColor","commentDetailBgColor","showWriteReply","setShowWriteReply","isEditing","setIsEditing","history","location","deletedText","format","fromNow","backgroundColor","cursor","push","pathname","state","requireAuth","prevPathname","username","mapStateToProps"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  HStack,\r\n  IconButton,\r\n  Text,\r\n  Tooltip,\r\n  useColorMode,\r\n} from '@chakra-ui/react';\r\nimport { ChatIcon, EditIcon } from '@chakra-ui/icons';\r\nimport ThemedBox from './ThemedBox';\r\nimport UpvoteBar from './UpvoteBar';\r\nimport WriteCommentBox from './WriteCommentBox';\r\nimport EditBox from './EditBox';\r\nimport DeleteButton from './DeleteButton';\r\nimport ChakraMarkdown from './ChakraMarkdown';\r\nimport { userSelector } from '../selectors';\r\n\r\nconst Comment = ({\r\n  id,\r\n  body,\r\n  postId,\r\n  createdAt,\r\n  author,\r\n  numVotes,\r\n  hasVoted,\r\n  user,\r\n}) => {\r\n  const { colorMode } = useColorMode();\r\n  const commentDetailColor = 'gray.500';\r\n  const commentDetailBgColor = colorMode === 'light' ? 'gray.100' : 'gray.600';\r\n\r\n  const [showWriteReply, setShowWriteReply] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const deletedText = '[deleted]';\r\n  return (\r\n    <ThemedBox\r\n      p={4}\r\n      borderRadius=\"md\"\r\n      width=\"100%\"\r\n      light=\"gray.50\"\r\n      dark=\"gray.700\"\r\n    >\r\n      <Flex>\r\n        <UpvoteBar\r\n          type=\"comment\"\r\n          size={5}\r\n          id={id}\r\n          numVotes={numVotes}\r\n          voteValue={hasVoted}\r\n        />\r\n        <Box flexGrow={1}>\r\n          <Text as=\"span\" isTruncated>\r\n            {author === null ? deletedText : author}\r\n          </Text>{' '}\r\n          <Text as=\"span\" color=\"gray.500\">\r\n            <Tooltip label={moment(createdAt).format('LLLL')}>\r\n              {moment(createdAt).fromNow()}\r\n            </Tooltip>\r\n          </Text>\r\n          {isEditing ? (\r\n            <Box mt={7}>\r\n              <EditBox\r\n                type=\"comment\"\r\n                id={id}\r\n                onClose={() => setIsEditing(false)}\r\n                initialText={body}\r\n              />\r\n            </Box>\r\n          ) : (\r\n            <Text>\r\n              {body === null ? (\r\n                deletedText\r\n              ) : (\r\n                <Box listStylePosition=\"inside\">\r\n                  <ChakraMarkdown>{body}</ChakraMarkdown>\r\n                </Box>\r\n              )}\r\n            </Text>\r\n          )}\r\n          <Flex\r\n            mt={3}\r\n            alignItems=\"center\"\r\n            color={commentDetailColor}\r\n            fontWeight=\"bold\"\r\n          >\r\n            <Box\r\n              p={2}\r\n              borderRadius=\"sm\"\r\n              _hover={{\r\n                backgroundColor: commentDetailBgColor,\r\n                cursor: 'pointer',\r\n              }}\r\n              onClick={() => {\r\n                if (user) {\r\n                  setShowWriteReply(!showWriteReply);\r\n                } else {\r\n                  history.push({\r\n                    pathname: '/login',\r\n                    state: {\r\n                      requireAuth: 'Log in to reply to comments',\r\n                      prevPathname: location.pathname,\r\n                    },\r\n                  });\r\n                }\r\n              }}\r\n            >\r\n              <ChatIcon mr={2} />\r\n              Reply\r\n            </Box>\r\n          </Flex>\r\n        </Box>\r\n        {user && user.username && user.username === author && (\r\n          <HStack alignItems=\"flex-start\">\r\n            {!isEditing && (\r\n              <IconButton\r\n                backgroundColor=\"inherit\"\r\n                onClick={() => setIsEditing(true)}\r\n                icon={<EditIcon />}\r\n              />\r\n            )}\r\n            <DeleteButton type=\"comment\" id={id} />\r\n          </HStack>\r\n        )}\r\n      </Flex>\r\n      {showWriteReply && (\r\n        <Box mt={2}>\r\n          <Box m={2}>\r\n            <Text as=\"span\" color=\"gray.500\">\r\n              {'Reply to '}\r\n            </Text>\r\n            {author}\r\n            <Text as=\"span\" color=\"gray.500\">\r\n              {' as '}\r\n            </Text>\r\n            {user.username}\r\n          </Box>\r\n          <WriteCommentBox\r\n            type=\"reply\"\r\n            postId={postId}\r\n            parentCommentId={id}\r\n            onClose={() => setShowWriteReply(false)}\r\n          />\r\n        </Box>\r\n      )}\r\n    </ThemedBox>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: userSelector(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Comment);\r\n"]},"metadata":{},"sourceType":"module"}