{"ast":null,"code":"var _jsxFileName = \"/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/Navbar.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Box, Flex, Heading, Spacer, HStack, Button, Menu, MenuButton, MenuList, MenuItem, MenuDivider, Alert, AlertIcon, CircularProgress } from '@chakra-ui/react';\nimport { ChevronDownIcon } from '@chakra-ui/icons';\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\nimport ThemedBox from './ThemedBox';\nimport { userSelector, subredditsSelector, createLoadingAndErrorSelector } from '../selectors';\nimport { startLogout } from '../actions/auth';\nimport { getSubreddits } from '../actions/subreddits';\nimport LoginAndRegisterButtons from './LoginAndRegisterButtons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Navbar = _ref => {\n  _s();\n\n  let {\n    user,\n    subreddits,\n    isLoading,\n    error,\n    startLogout,\n    getSubreddits\n  } = _ref;\n  const location = useLocation();\n  const subredditName = location.pathname.match(/r\\/[^\\/]+/);\n  useEffect(() => {\n    getSubreddits();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ThemedBox, {\n    py: 2,\n    px: [0, 0, 10, 10],\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    mb: 7,\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      ml: [2, 4],\n      display: user ? 'block' : ['none', 'block'],\n      fontSize: ['1.3rem', '2.25rem'],\n      children: \"Student Universe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HStack, {\n      children: [/*#__PURE__*/_jsxDEV(Menu, {\n        children: [/*#__PURE__*/_jsxDEV(MenuButton, {\n          mx: 2,\n          as: Button,\n          rightIcon: /*#__PURE__*/_jsxDEV(ChevronDownIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 53\n          }, this),\n          children: subredditName || 'Home'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuList, {\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            as: Link,\n            to: \"/\",\n            children: \"Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuDivider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), subreddits.map(_ref2 => {\n            let {\n              name\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              as: Link,\n              to: `/r/${name}`,\n              children: `r/${name}`\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this);\n          }), error && /*#__PURE__*/_jsxDEV(Alert, {\n            status: \"error\",\n            children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), \"Error fetching subreddits\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(Flex, {\n            justifyContent: \"center\",\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n              isIndeterminate: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), user && /*#__PURE__*/_jsxDEV(Button, {\n        display: ['none', 'flex'],\n        as: Link,\n        to: \"/submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), user ? /*#__PURE__*/_jsxDEV(Menu, {\n      children: [/*#__PURE__*/_jsxDEV(MenuButton, {\n        as: Button,\n        rightIcon: /*#__PURE__*/_jsxDEV(ChevronDownIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 46\n        }, this),\n        children: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MenuList, {\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          display: ['block', 'none'],\n          as: Link,\n          to: \"/submit\",\n          children: \"Submit post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          as: Link,\n          to: \"/subreddits/create\",\n          children: \"Create subreddit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          onClick: async () => {\n            await startLogout();\n          },\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(LoginAndRegisterButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ColorModeSwitcher, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Navbar, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});\n\n_c = Navbar;\nconst {\n  loadingSelector,\n  errorSelector\n} = createLoadingAndErrorSelector(['GET_SUBREDDITS']);\n\nconst mapStateToProps = state => ({\n  isLoading: loadingSelector(state),\n  error: errorSelector(state),\n  subreddits: subredditsSelector(state),\n  user: userSelector(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startLogout: () => dispatch(startLogout()),\n  getSubreddits: () => dispatch(getSubreddits())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/Navbar.js"],"names":["useEffect","connect","Link","useLocation","Box","Flex","Heading","Spacer","HStack","Button","Menu","MenuButton","MenuList","MenuItem","MenuDivider","Alert","AlertIcon","CircularProgress","ChevronDownIcon","ColorModeSwitcher","ThemedBox","userSelector","subredditsSelector","createLoadingAndErrorSelector","startLogout","getSubreddits","LoginAndRegisterButtons","Navbar","user","subreddits","isLoading","error","location","subredditName","pathname","match","map","name","username","loadingSelector","errorSelector","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  Spacer,\r\n  HStack,\r\n  Button,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Alert,\r\n  AlertIcon,\r\n  CircularProgress,\r\n} from '@chakra-ui/react';\r\nimport { ChevronDownIcon } from '@chakra-ui/icons';\r\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\r\nimport ThemedBox from './ThemedBox';\r\nimport {\r\n  userSelector,\r\n  subredditsSelector,\r\n  createLoadingAndErrorSelector,\r\n} from '../selectors';\r\nimport { startLogout } from '../actions/auth';\r\nimport { getSubreddits } from '../actions/subreddits';\r\nimport LoginAndRegisterButtons from './LoginAndRegisterButtons';\r\n\r\nconst Navbar = ({\r\n  user,\r\n  subreddits,\r\n  isLoading,\r\n  error,\r\n  startLogout,\r\n  getSubreddits,\r\n}) => {\r\n  const location = useLocation();\r\n  const subredditName = location.pathname.match(/r\\/[^\\/]+/);\r\n\r\n  useEffect(() => {\r\n    getSubreddits();\r\n  }, []);\r\n\r\n  return (\r\n    <ThemedBox\r\n      py={2}\r\n      px={[0, 0, 10, 10]}\r\n      display=\"flex\"\r\n      justifyContent=\"flex-start\"\r\n      alignItems=\"center\"\r\n      mb={7}\r\n    >\r\n      <Heading\r\n        ml={[2, 4]}\r\n        display={user ? 'block' : ['none', 'block']}\r\n        fontSize={['1.3rem', '2.25rem']}\r\n      >\r\n        Student Universe\r\n      </Heading>\r\n      <HStack>\r\n        <Menu>\r\n          <MenuButton mx={2} as={Button} rightIcon={<ChevronDownIcon />}>\r\n            {subredditName || 'Home'}\r\n          </MenuButton>\r\n          <MenuList>\r\n            <MenuItem as={Link} to=\"/\">\r\n              Home\r\n            </MenuItem>\r\n            <MenuDivider />\r\n            {subreddits.map(({ name }) => (\r\n              <MenuItem\r\n                key={name}\r\n                as={Link}\r\n                to={`/r/${name}`}\r\n              >{`r/${name}`}</MenuItem>\r\n            ))}\r\n            {error && (\r\n              <Alert status=\"error\">\r\n                <AlertIcon />\r\n                Error fetching subreddits\r\n              </Alert>\r\n            )}\r\n            {isLoading && (\r\n              <Flex justifyContent=\"center\">\r\n                <CircularProgress isIndeterminate />\r\n              </Flex>\r\n            )}\r\n          </MenuList>\r\n        </Menu>\r\n        {user && (\r\n          <Button display={['none', 'flex']} as={Link} to=\"/submit\">\r\n            Submit\r\n          </Button>\r\n        )}\r\n      </HStack>\r\n      <Spacer />\r\n\r\n      {user ? (\r\n        <Menu>\r\n          <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\r\n            {user.username}\r\n          </MenuButton>\r\n          <MenuList>\r\n            <MenuItem display={['block', 'none']} as={Link} to=\"/submit\">\r\n              Submit post\r\n            </MenuItem>\r\n            <MenuItem as={Link} to=\"/subreddits/create\">\r\n              Create subreddit\r\n            </MenuItem>\r\n            <MenuItem\r\n              onClick={async () => {\r\n                await startLogout();\r\n              }}\r\n            >\r\n              Logout\r\n            </MenuItem>\r\n          </MenuList>\r\n        </Menu>\r\n      ) : (\r\n        <LoginAndRegisterButtons />\r\n      )}\r\n      <ColorModeSwitcher />\r\n    </ThemedBox>\r\n  );\r\n};\r\n\r\nconst { loadingSelector, errorSelector } = createLoadingAndErrorSelector([\r\n  'GET_SUBREDDITS',\r\n]);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoading: loadingSelector(state),\r\n  error: errorSelector(state),\r\n  subreddits: subredditsSelector(state),\r\n  user: userSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  startLogout: () => dispatch(startLogout()),\r\n  getSubreddits: () => dispatch(getSubreddits()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n"]},"metadata":{},"sourceType":"module"}