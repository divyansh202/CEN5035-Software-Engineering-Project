{"ast":null,"code":"import axios from '../axios-config';\nimport { editPost } from './post';\nimport { setPostList } from './postList';\nimport { setComments } from './comments';\nimport { commentsSelector, postListSelector } from '../selectors';\nexport const login = (user, token) => ({\n  type: 'LOGIN',\n  user,\n  token\n});\nexport const logout = () => ({\n  type: 'LOGOUT'\n});\nexport const startLogin = (username, password) => async dispatch => {\n  try {\n    dispatch({\n      type: 'LOGIN_REQUEST'\n    });\n    const response = await axios.post('/users/login', {\n      username,\n      password\n    });\n    const {\n      user,\n      token\n    } = response.data;\n    dispatch(login(user, token));\n    dispatch({\n      type: 'LOGIN_SUCCESS'\n    });\n  } catch (e) {\n    dispatch({\n      type: 'LOGIN_FAILURE',\n      message: e.message,\n      response: e.response\n    });\n  }\n};\nexport const startLogout = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'LOGOUT_REQUEST'\n    });\n    await axios.post('/users/logout');\n    dispatch(logout());\n    dispatch(editPost(1, {\n      has_voted: null\n    }));\n    dispatch(setPostList(postListSelector(getState()).map(post => ({ ...post,\n      has_voted: null\n    }))));\n    dispatch(setComments(commentsSelector(getState()).map(comment => ({ ...comment,\n      has_voted: null\n    }))));\n    dispatch({\n      type: 'LOGOUT_SUCCESS'\n    });\n  } catch (e) {\n    dispatch({\n      type: 'LOGOUT_FAILURE',\n      message: e.message,\n      response: e.response\n    });\n  }\n};\nexport const startRegister = (username, password) => async dispatch => {\n  try {\n    dispatch({\n      type: 'REGISTER_REQUEST'\n    });\n    axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n    const response = await axios.post('/api/signup', {\n      \"Email\": username,\n      \"Password\": password\n    }, {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      }\n    });\n    const {\n      user,\n      token\n    } = response.data;\n    dispatch(login(user, token));\n    dispatch({\n      type: 'REGISTER_SUCCESS'\n    });\n  } catch (e) {\n    dispatch({\n      type: 'REGISTER_FAILURE',\n      message: e.message,\n      response: e.response\n    });\n  }\n};","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/actions/auth.js"],"names":["axios","editPost","setPostList","setComments","commentsSelector","postListSelector","login","user","token","type","logout","startLogin","username","password","dispatch","response","post","data","e","message","startLogout","getState","has_voted","map","comment","startRegister","defaults","headers"],"mappings":"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","sourcesContent":["import axios from '../axios-config';\r\nimport { editPost } from './post';\r\nimport { setPostList } from './postList';\r\nimport { setComments } from './comments';\r\nimport { commentsSelector, postListSelector } from '../selectors';\r\n\r\nexport const login = (user, token) => ({\r\n  type: 'LOGIN',\r\n  user,\r\n  token,\r\n});\r\n\r\nexport const logout = () => ({ type: 'LOGOUT' });\r\n\r\nexport const startLogin = (username, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: 'LOGIN_REQUEST' });\r\n    const response = await axios.post('/users/login', {\r\n      username,\r\n      password,\r\n    });\r\n    const { user, token } = response.data;\r\n    dispatch(login(user, token));\r\n    dispatch({ type: 'LOGIN_SUCCESS' });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: 'LOGIN_FAILURE',\r\n      message: e.message,\r\n      response: e.response,\r\n    });\r\n  }\r\n};\r\n\r\nexport const startLogout = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: 'LOGOUT_REQUEST' });\r\n    await axios.post('/users/logout');\r\n    dispatch(logout());\r\n    dispatch(editPost(1, { has_voted: null }));\r\n    dispatch(\r\n      setPostList(\r\n        postListSelector(getState()).map((post) => ({\r\n          ...post,\r\n          has_voted: null,\r\n        }))\r\n      )\r\n    );\r\n    dispatch(\r\n      setComments(\r\n        commentsSelector(getState()).map((comment) => ({\r\n          ...comment,\r\n          has_voted: null,\r\n        }))\r\n      )\r\n    );\r\n    dispatch({ type: 'LOGOUT_SUCCESS' });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: 'LOGOUT_FAILURE',\r\n      message: e.message,\r\n      response: e.response,\r\n    });\r\n  }\r\n};\r\n\r\nexport const startRegister = (username, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: 'REGISTER_REQUEST' });\r\n    axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\r\n    const response = await axios.post('/api/signup', {\r\n      \"Email\": username,\r\n      \"Password\":password\r\n    }, { headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Content-Type': 'application/json',\r\n    },});\r\n    const { user, token } = response.data;\r\n    dispatch(login(user, token));\r\n    dispatch({ type: 'REGISTER_SUCCESS' });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: 'REGISTER_FAILURE',\r\n      message: e.message,\r\n      response: e.response,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}