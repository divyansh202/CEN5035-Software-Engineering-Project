{"ast":null,"code":"import { CurlHelper } from \"./lib/CurlHelper.js\";\n\nfunction defaultLogCallback(curlResult, err) {\n  const {\n    command\n  } = curlResult;\n\n  if (err) {\n    console.error(err);\n  } else {\n    console.info(command);\n  }\n}\n\nexport default (function (instance) {\n  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultLogCallback;\n  instance.interceptors.request.use(req => {\n    try {\n      const curl = new CurlHelper(req);\n      req.curlObject = curl;\n      req.curlCommand = curl.generateCommand();\n\n      req.clearCurl = () => {\n        delete req.curlObject;\n        delete req.curlCommand;\n        delete req.clearCurl;\n      };\n    } catch (err) {\n      // Even if the axios middleware is stopped, no error should occur outside.\n      callback(null, err);\n    } finally {\n      if (req.curlirize !== false) {\n        callback({\n          command: req.curlCommand,\n          object: req.curlObject\n        });\n      }\n\n      return req;\n    }\n  });\n});","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/node_modules/axios-curlirize/src/main.js"],"names":["CurlHelper","defaultLogCallback","curlResult","err","command","console","error","info","instance","callback","interceptors","request","use","req","curl","curlObject","curlCommand","generateCommand","clearCurl","curlirize","object"],"mappings":"AAAA,SAASA,UAAT,QAA2B,qBAA3B;;AAEA,SAASC,kBAAT,CAA4BC,UAA5B,EAAwCC,GAAxC,EAA6C;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAcF,UAApB;;AACA,MAAIC,GAAJ,EAAS;AACPE,IAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACD,GAFD,MAEO;AACLE,IAAAA,OAAO,CAACE,IAAR,CAAaH,OAAb;AACD;AACF;;AAED,gBAAe,UAACI,QAAD,EAA6C;AAAA,MAAlCC,QAAkC,uEAAvBR,kBAAuB;AAC1DO,EAAAA,QAAQ,CAACE,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,GAAD,IAAS;AACzC,QAAI;AACF,YAAMC,IAAI,GAAG,IAAId,UAAJ,CAAea,GAAf,CAAb;AACAA,MAAAA,GAAG,CAACE,UAAJ,GAAiBD,IAAjB;AACAD,MAAAA,GAAG,CAACG,WAAJ,GAAkBF,IAAI,CAACG,eAAL,EAAlB;;AACAJ,MAAAA,GAAG,CAACK,SAAJ,GAAgB,MAAM;AACpB,eAAOL,GAAG,CAACE,UAAX;AACA,eAAOF,GAAG,CAACG,WAAX;AACA,eAAOH,GAAG,CAACK,SAAX;AACD,OAJD;AAKD,KATD,CASE,OAAOf,GAAP,EAAY;AACZ;AACAM,MAAAA,QAAQ,CAAC,IAAD,EAAON,GAAP,CAAR;AACD,KAZD,SAYU;AACR,UAAIU,GAAG,CAACM,SAAJ,KAAkB,KAAtB,EAA6B;AAC3BV,QAAAA,QAAQ,CAAC;AACPL,UAAAA,OAAO,EAAES,GAAG,CAACG,WADN;AAEPI,UAAAA,MAAM,EAAEP,GAAG,CAACE;AAFL,SAAD,CAAR;AAID;;AACD,aAAOF,GAAP;AACD;AACF,GAtBD;AAuBD,CAxBD","sourcesContent":["import { CurlHelper } from \"./lib/CurlHelper.js\";\n\nfunction defaultLogCallback(curlResult, err) {\n  const { command } = curlResult;\n  if (err) {\n    console.error(err);\n  } else {\n    console.info(command);\n  }\n}\n\nexport default (instance, callback = defaultLogCallback) => {\n  instance.interceptors.request.use((req) => {\n    try {\n      const curl = new CurlHelper(req);\n      req.curlObject = curl;\n      req.curlCommand = curl.generateCommand();\n      req.clearCurl = () => {\n        delete req.curlObject;\n        delete req.curlCommand;\n        delete req.clearCurl;\n      };\n    } catch (err) {\n      // Even if the axios middleware is stopped, no error should occur outside.\n      callback(null, err);\n    } finally {\n      if (req.curlirize !== false) {\n        callback({\n          command: req.curlCommand,\n          object: req.curlObject\n        });\n      }\n      return req;\n    }\n  });\n};\n\n"]},"metadata":{},"sourceType":"module"}