{"ast":null,"code":"var _jsxFileName = \"/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/CommentsPage.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { Box, Flex, Text, Heading, Alert, AlertIcon, CircularProgress } from '@chakra-ui/react';\nimport Post from './Post';\nimport CommentsThread from './CommentsThread';\nimport WriteCommentBox from './WriteCommentBox';\nimport LoginAndRegisterButtons from './LoginAndRegisterButtons';\nimport { createLoadingAndErrorSelector, postSelector, commentsSelector, userSelector } from '../selectors';\nimport { getPostAndComments } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getCommentsWithChildren = comments => {\n  const commentsWithChildren = comments.map(comment => ({ ...comment,\n    children: []\n  }));\n  commentsWithChildren.forEach(childComment => {\n    const {\n      parent_comment_id\n    } = childComment;\n\n    if (parent_comment_id) {\n      const parent = commentsWithChildren.find(comment => parent_comment_id === comment.id);\n      parent.children = parent.children.concat(childComment);\n    }\n  });\n  return commentsWithChildren.filter(_ref => {\n    let {\n      parent_comment_id,\n      body,\n      children\n    } = _ref;\n    return parent_comment_id === null && (body !== null || children.length > 0);\n  });\n};\n\nconst CommentsPage = _ref2 => {\n  _s();\n\n  let {\n    isLoading,\n    error,\n    post,\n    comments,\n    getPostAndComments,\n    user\n  } = _ref2;\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    getPostAndComments(id);\n  }, [getPostAndComments, id]);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      m: 10,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        isIndeterminate: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  } else if (error) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      status: \"error\",\n      children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n  const {\n    id: post_id,\n    type,\n    subreddit_name,\n    author_name,\n    created_at,\n    title,\n    body,\n    votes,\n    has_voted\n  } = post;\n  const numComments = comments.filter(_ref3 => {\n    let {\n      body\n    } = _ref3;\n    return body !== null;\n  }).length;\n  const rootComments = getCommentsWithChildren(comments);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Post, {\n      id: post_id,\n      type: type,\n      subreddit: subreddit_name,\n      author: author_name,\n      createdAt: created_at,\n      title: title,\n      body: body,\n      numComments: numComments,\n      numVotes: votes,\n      hasVoted: has_voted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), user ? /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        m: 2,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          as: \"span\",\n          color: \"gray.500\",\n          children: 'Comment as '\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"span\",\n          children: user.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(WriteCommentBox, {\n        postId: post_id,\n        parentCommentId: null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n      p: 5,\n      border: \"1px\",\n      borderRadius: 5,\n      borderColor: \"gray.500\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        size: \"md\",\n        color: \"gray.500\",\n        children: \"Log in or register to leave a comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LoginAndRegisterButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentsThread, {\n      comments: rootComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CommentsPage, \"XT1vicrm+NSYLQxrGm9hA77HN9Y=\", false, function () {\n  return [useParams];\n});\n\n_c = CommentsPage;\nconst {\n  loadingSelector,\n  errorSelector\n} = createLoadingAndErrorSelector(['GET_POST_AND_COMMENTS']);\n\nconst mapStateToProps = state => ({\n  isLoading: loadingSelector(state),\n  error: errorSelector(state),\n  post: postSelector(state),\n  comments: commentsSelector(state),\n  user: userSelector(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getPostAndComments: id => dispatch(getPostAndComments(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentsPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentsPage\");","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/CommentsPage.js"],"names":["useEffect","connect","useParams","Box","Flex","Text","Heading","Alert","AlertIcon","CircularProgress","Post","CommentsThread","WriteCommentBox","LoginAndRegisterButtons","createLoadingAndErrorSelector","postSelector","commentsSelector","userSelector","getPostAndComments","getCommentsWithChildren","comments","commentsWithChildren","map","comment","children","forEach","childComment","parent_comment_id","parent","find","id","concat","filter","body","length","CommentsPage","isLoading","error","post","user","post_id","type","subreddit_name","author_name","created_at","title","votes","has_voted","numComments","rootComments","username","loadingSelector","errorSelector","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Text,\r\n  Heading,\r\n  Alert,\r\n  AlertIcon,\r\n  CircularProgress,\r\n} from '@chakra-ui/react';\r\nimport Post from './Post';\r\nimport CommentsThread from './CommentsThread';\r\nimport WriteCommentBox from './WriteCommentBox';\r\nimport LoginAndRegisterButtons from './LoginAndRegisterButtons';\r\nimport {\r\n  createLoadingAndErrorSelector,\r\n  postSelector,\r\n  commentsSelector,\r\n  userSelector,\r\n} from '../selectors';\r\nimport { getPostAndComments } from '../actions';\r\n\r\nconst getCommentsWithChildren = (comments) => {\r\n  const commentsWithChildren = comments.map((comment) => ({\r\n    ...comment,\r\n    children: [],\r\n  }));\r\n  commentsWithChildren.forEach((childComment) => {\r\n    const { parent_comment_id } = childComment;\r\n    if (parent_comment_id) {\r\n      const parent = commentsWithChildren.find(\r\n        (comment) => parent_comment_id === comment.id\r\n      );\r\n      parent.children = parent.children.concat(childComment);\r\n    }\r\n  });\r\n  return commentsWithChildren.filter(\r\n    ({ parent_comment_id, body, children }) =>\r\n      parent_comment_id === null && (body !== null || children.length > 0)\r\n  );\r\n};\r\n\r\nconst CommentsPage = ({\r\n  isLoading,\r\n  error,\r\n  post,\r\n  comments,\r\n  getPostAndComments,\r\n  user,\r\n}) => {\r\n  const { id } = useParams();\r\n  useEffect(() => {\r\n    getPostAndComments(id);\r\n  }, [getPostAndComments, id]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Flex m={10} justifyContent=\"center\" alignItems=\"center\">\r\n        <CircularProgress isIndeterminate />\r\n      </Flex>\r\n    );\r\n  } else if (error) {\r\n    return (\r\n      <Alert status=\"error\">\r\n        <AlertIcon />\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n  const {\r\n    id: post_id,\r\n    type,\r\n    subreddit_name,\r\n    author_name,\r\n    created_at,\r\n    title,\r\n    body,\r\n    votes,\r\n    has_voted,\r\n  } = post;\r\n  const numComments = comments.filter(({ body }) => body !== null).length;\r\n\r\n  const rootComments = getCommentsWithChildren(comments);\r\n  return (\r\n    <Box>\r\n      <Post\r\n        id={post_id}\r\n        type={type}\r\n        subreddit={subreddit_name}\r\n        author={author_name}\r\n        createdAt={created_at}\r\n        title={title}\r\n        body={body}\r\n        numComments={numComments}\r\n        numVotes={votes}\r\n        hasVoted={has_voted}\r\n      />\r\n      <br />\r\n      {user ? (\r\n        <Box>\r\n          <Box m={2}>\r\n            <Text as=\"span\" color=\"gray.500\">\r\n              {'Comment as '}\r\n            </Text>\r\n            <Text as=\"span\">{user.username}</Text>\r\n          </Box>\r\n          <WriteCommentBox postId={post_id} parentCommentId={null} />\r\n        </Box>\r\n      ) : (\r\n        <Flex\r\n          p={5}\r\n          border=\"1px\"\r\n          borderRadius={5}\r\n          borderColor=\"gray.500\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <Heading size=\"md\" color=\"gray.500\">\r\n            Log in or register to leave a comment\r\n          </Heading>\r\n          <LoginAndRegisterButtons />\r\n        </Flex>\r\n      )}\r\n      <br />\r\n      <CommentsThread comments={rootComments} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst { loadingSelector, errorSelector } = createLoadingAndErrorSelector([\r\n  'GET_POST_AND_COMMENTS',\r\n]);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoading: loadingSelector(state),\r\n  error: errorSelector(state),\r\n  post: postSelector(state),\r\n  comments: commentsSelector(state),\r\n  user: userSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getPostAndComments: (id) => dispatch(getPostAndComments(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentsPage);\r\n"]},"metadata":{},"sourceType":"module"}