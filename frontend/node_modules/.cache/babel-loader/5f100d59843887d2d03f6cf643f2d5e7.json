{"ast":null,"code":"var _jsxFileName = \"/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/CreateSubredditPage.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Box, Stack, FormControl, FormErrorMessage, Input, Textarea, Button, Alert, AlertIcon } from '@chakra-ui/react';\nimport { createLoadingAndErrorSelector } from '../selectors';\nimport { createSubreddit } from '../actions/subreddits';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CreateSubredditPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.isNameValid = name => {\n      const nameRegex = new RegExp('^[a-z0-9]+$', 'i');\n      return nameRegex.test(name);\n    };\n\n    this.handleSubmit = async e => {\n      try {\n        e.preventDefault();\n        const {\n          name,\n          description\n        } = this.state;\n        const {\n          createSubreddit,\n          history\n        } = this.props;\n        const {\n          name: subredditName\n        } = await createSubreddit(name, description);\n        history.push(`/r/${subredditName}`);\n      } catch (e) {}\n    };\n\n    this.state = {\n      name: '',\n      description: ''\n    };\n  }\n\n  render() {\n    const {\n      name,\n      description\n    } = this.state;\n    const {\n      isLoading,\n      error\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      w: ['100%', '90%', '80%', '70%'],\n      m: \"auto\",\n      children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n        status: \"error\",\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            isInvalid: name.length > 0 && !this.isNameValid(name),\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              value: name,\n              onChange: e => this.setState({\n                name: e.target.value\n              }),\n              variant: \"filled\",\n              placeholder: \"subreddit name\",\n              isRequired: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n              children: \"Name can only contain alphanumeric characters\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(Textarea, {\n              value: description,\n              onChange: e => this.setState({\n                description: e.target.value\n              }),\n              variant: \"filled\",\n              rows: 5,\n              placeholder: \"description (optional)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            isLoading: isLoading,\n            type: \"submit\",\n            isDisabled: !this.isNameValid(name),\n            children: \"create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst {\n  loadingSelector,\n  errorSelector\n} = createLoadingAndErrorSelector(['CREATE_SUBREDDIT'], false);\n\nconst mapStateToProps = state => ({\n  isLoading: loadingSelector(state),\n  error: errorSelector(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  createSubreddit: (name, description) => dispatch(createSubreddit(name, description))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateSubredditPage));","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/CreateSubredditPage.js"],"names":["React","connect","withRouter","Box","Stack","FormControl","FormErrorMessage","Input","Textarea","Button","Alert","AlertIcon","createLoadingAndErrorSelector","createSubreddit","CreateSubredditPage","Component","constructor","props","isNameValid","name","nameRegex","RegExp","test","handleSubmit","e","preventDefault","description","state","history","subredditName","push","render","isLoading","error","length","setState","target","value","loadingSelector","errorSelector","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Stack,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  Input,\r\n  Textarea,\r\n  Button,\r\n  Alert,\r\n  AlertIcon,\r\n} from '@chakra-ui/react';\r\nimport { createLoadingAndErrorSelector } from '../selectors';\r\nimport { createSubreddit } from '../actions/subreddits';\r\n\r\nclass CreateSubredditPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: '',\r\n      description: '',\r\n    };\r\n  }\r\n\r\n  isNameValid = (name) => {\r\n    const nameRegex = new RegExp('^[a-z0-9]+$', 'i');\r\n    return nameRegex.test(name);\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const { name, description } = this.state;\r\n      const { createSubreddit, history } = this.props;\r\n      const { name: subredditName } = await createSubreddit(name, description);\r\n      history.push(`/r/${subredditName}`);\r\n    } catch (e) {}\r\n  };\r\n\r\n  render() {\r\n    const { name, description } = this.state;\r\n    const { isLoading, error } = this.props;\r\n    return (\r\n      <Box w={['100%', '90%', '80%', '70%']} m=\"auto\">\r\n        {error && (\r\n          <Alert status=\"error\" mb={4}>\r\n            <AlertIcon />\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        <form onSubmit={this.handleSubmit}>\r\n          <Stack>\r\n            <FormControl isInvalid={name.length > 0 && !this.isNameValid(name)}>\r\n              <Input\r\n                value={name}\r\n                onChange={(e) => this.setState({ name: e.target.value })}\r\n                variant=\"filled\"\r\n                placeholder=\"subreddit name\"\r\n                isRequired\r\n              />\r\n              <FormErrorMessage>\r\n                Name can only contain alphanumeric characters\r\n              </FormErrorMessage>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Textarea\r\n                value={description}\r\n                onChange={(e) => this.setState({ description: e.target.value })}\r\n                variant=\"filled\"\r\n                rows={5}\r\n                placeholder=\"description (optional)\"\r\n              />\r\n            </FormControl>\r\n            <Button\r\n              isLoading={isLoading}\r\n              type=\"submit\"\r\n              isDisabled={!this.isNameValid(name)}\r\n            >\r\n              create\r\n            </Button>\r\n          </Stack>\r\n        </form>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nconst { loadingSelector, errorSelector } = createLoadingAndErrorSelector(\r\n  ['CREATE_SUBREDDIT'],\r\n  false\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoading: loadingSelector(state),\r\n  error: errorSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  createSubreddit: (name, description) =>\r\n    dispatch(createSubreddit(name, description)),\r\n});\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(CreateSubredditPage)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}