{"ast":null,"code":"var _jsxFileName = \"/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/RegisterPage.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Box, Stack, FormControl, FormErrorMessage, Input, Button, Alert, AlertIcon } from '@chakra-ui/react';\nimport { startRegister } from '../actions/auth';\nimport { createLoadingAndErrorSelector } from '../selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RegisterPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async e => {\n      try {\n        e.preventDefault();\n        const {\n          username,\n          password,\n          confirmPassword\n        } = this.state;\n        const {\n          startRegister,\n          history,\n          location\n        } = this.props;\n\n        if (password !== confirmPassword) {\n          return this.setState({\n            doNotMatchError: 'Passwords do not match'\n          });\n        }\n\n        await startRegister(username, password);\n        const {\n          error\n        } = this.props;\n\n        if (!error) {\n          history.push(location && location.state && location.state.prevPathname || '/');\n        }\n      } catch (e) {}\n    };\n\n    this.state = {\n      username: '',\n      password: '',\n      confirmPassword: '',\n      doNotMatchError: ''\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      password,\n      confirmPassword\n    } = this.state;\n\n    if (prevState.password !== password || prevState.confirmPassword !== confirmPassword) {\n      this.setState({\n        doNotMatchError: ''\n      });\n    }\n  }\n\n  render() {\n    const {\n      username,\n      password,\n      confirmPassword,\n      doNotMatchError\n    } = this.state;\n    const {\n      isLoading,\n      error\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      w: 300,\n      m: \"auto\",\n      children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n        status: \"error\",\n        mb: 2,\n        children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              value: username,\n              onChange: e => this.setState({\n                username: e.target.value\n              }),\n              id: \"username-input\",\n              variant: \"filled\",\n              type: \"email\",\n              placeholder: \"username\",\n              size: \"md\",\n              isRequired: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              value: password,\n              onChange: e => this.setState({\n                password: e.target.value\n              }),\n              id: \"password-input\",\n              variant: \"filled\",\n              type: \"password\",\n              placeholder: \"password\",\n              size: \"md\",\n              isRequired: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            isInvalid: doNotMatchError,\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              value: confirmPassword,\n              onChange: e => this.setState({\n                confirmPassword: e.target.value\n              }),\n              id: \"confirm-password-input\",\n              variant: \"filled\",\n              type: \"password\",\n              placeholder: \"confirm password\",\n              size: \"md\",\n              isRequired: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n              children: doNotMatchError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            isLoading: isLoading,\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst {\n  loadingSelector,\n  errorSelector\n} = createLoadingAndErrorSelector(['REGISTER'], false);\n\nconst mapStateToProps = state => ({\n  isLoading: loadingSelector(state),\n  error: errorSelector(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startRegister: (username, password) => dispatch(startRegister(username, password))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RegisterPage));","map":{"version":3,"sources":["/Users/garvitgupta/Documents/Development/CEN5035-Software-Engineering-Project/frontend/src/components/RegisterPage.js"],"names":["React","connect","withRouter","Box","Stack","FormControl","FormErrorMessage","Input","Button","Alert","AlertIcon","startRegister","createLoadingAndErrorSelector","RegisterPage","Component","constructor","props","handleSubmit","e","preventDefault","username","password","confirmPassword","state","history","location","setState","doNotMatchError","error","push","prevPathname","componentDidUpdate","prevProps","prevState","render","isLoading","target","value","loadingSelector","errorSelector","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Stack,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  Input,\r\n  Button,\r\n  Alert,\r\n  AlertIcon,\r\n} from '@chakra-ui/react';\r\nimport { startRegister } from '../actions/auth';\r\nimport { createLoadingAndErrorSelector } from '../selectors';\r\n\r\nclass RegisterPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      doNotMatchError: '',\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { password, confirmPassword } = this.state;\r\n    if (\r\n      prevState.password !== password ||\r\n      prevState.confirmPassword !== confirmPassword\r\n    ) {\r\n      this.setState({ doNotMatchError: '' });\r\n    }\r\n  }\r\n\r\n  handleSubmit = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const { username, password, confirmPassword } = this.state;\r\n      const { startRegister, history, location } = this.props;\r\n      if (password !== confirmPassword) {\r\n        return this.setState({ doNotMatchError: 'Passwords do not match' });\r\n      }\r\n      await startRegister(username, password);\r\n      const { error } = this.props;\r\n      if (!error) {\r\n        history.push(\r\n          (location && location.state && location.state.prevPathname) || '/'\r\n        );\r\n      }\r\n    } catch (e) {}\r\n  };\r\n\r\n  render() {\r\n    const { username, password, confirmPassword, doNotMatchError } = this.state;\r\n    const { isLoading, error } = this.props;\r\n    return (\r\n      <Box w={300} m=\"auto\">\r\n        {error && (\r\n          <Alert status=\"error\" mb={2}>\r\n            <AlertIcon />\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        <form onSubmit={this.handleSubmit}>\r\n          <Stack spacing={3}>\r\n            <FormControl>\r\n              <Input\r\n                value={username}\r\n                onChange={(e) => this.setState({ username: e.target.value })}\r\n                id=\"username-input\"\r\n                variant=\"filled\"\r\n                type=\"email\"\r\n                placeholder=\"username\"\r\n                size=\"md\"\r\n                isRequired\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                value={password}\r\n                onChange={(e) => this.setState({ password: e.target.value })}\r\n                id=\"password-input\"\r\n                variant=\"filled\"\r\n                type=\"password\"\r\n                placeholder=\"password\"\r\n                size=\"md\"\r\n                isRequired\r\n              />\r\n            </FormControl>\r\n            <FormControl isInvalid={doNotMatchError}>\r\n              <Input\r\n                value={confirmPassword}\r\n                onChange={(e) =>\r\n                  this.setState({ confirmPassword: e.target.value })\r\n                }\r\n                id=\"confirm-password-input\"\r\n                variant=\"filled\"\r\n                type=\"password\"\r\n                placeholder=\"confirm password\"\r\n                size=\"md\"\r\n                isRequired\r\n              />\r\n              <FormErrorMessage>{doNotMatchError}</FormErrorMessage>\r\n            </FormControl>\r\n            <Button type=\"submit\" isLoading={isLoading}>\r\n              Register\r\n            </Button>\r\n          </Stack>\r\n        </form>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nconst { loadingSelector, errorSelector } = createLoadingAndErrorSelector(\r\n  ['REGISTER'],\r\n  false\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoading: loadingSelector(state),\r\n  error: errorSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  startRegister: (username, password) =>\r\n    dispatch(startRegister(username, password)),\r\n});\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(RegisterPage)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}